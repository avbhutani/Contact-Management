{"ast":null,"code":"var _jsxFileName = \"/Users/anubhavbhutani/Desktop/Erino Assessment/frontend/src/components/ContactTable.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { DataGrid } from '@mui/x-data-grid';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Snackbar from '@mui/material/Snackbar';\n\n// Define schema fields dynamically for rendering\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contactSchema = [{\n  field: 'firstName',\n  headerName: 'First Name',\n  width: 150\n}, {\n  field: 'lastName',\n  headerName: 'Last Name',\n  width: 150\n}, {\n  field: 'email',\n  headerName: 'Email',\n  width: 250\n}, {\n  field: 'phoneNumber',\n  headerName: 'Phone Number',\n  width: 180\n}, {\n  field: 'company',\n  headerName: 'Company',\n  width: 200\n}, {\n  field: 'jobTitle',\n  headerName: 'Job Title',\n  width: 180\n}];\nconst ContactsTable = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  // Fetch contacts from the API\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/contacts');\n        // Adding an 'id' field required by DataGrid\n        const contactsWithId = response.data.map((contact, index) => ({\n          ...contact,\n          id: contact._id || index\n        }));\n        setContacts(contactsWithId);\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchContacts();\n  }, []);\n\n  // Handle delete action\n  const handleDelete = async () => {\n    if (selectedRows.length > 0) {\n      try {\n        // Loop through selected rows and send delete requests\n        for (const rowId of selectedRows) {\n          const contactToDelete = contacts.find(contact => contact.id === rowId);\n          await axios.delete(`http://localhost:4000/contacts/${contactToDelete._id}`);\n        }\n\n        // Fetch the updated contacts after deletion\n        const response = await axios.get('http://localhost:4000/contacts');\n        const contactsWithId = response.data.map((contact, index) => ({\n          ...contact,\n          id: contact._id || index\n        }));\n        setContacts(contactsWithId);\n        setSnackbarMessage('Selected contacts have been deleted.');\n        setOpenSnackbar(true);\n        setSelectedRows([]); // Clear selected rows\n      } catch (error) {\n        console.error('Error deleting contacts:', error);\n        setSnackbarMessage('Error deleting selected contacts.');\n        setOpenSnackbar(true);\n      }\n    } else {\n      setSnackbarMessage('No contacts selected.');\n      setOpenSnackbar(true);\n    }\n  };\n  const handleSelectionChange = newSelection => {\n    setSelectedRows(newSelection.selectionModel);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      marginTop: \"20px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 500,\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: handleDelete,\n      sx: {\n        marginBottom: 2\n      },\n      disabled: selectedRows.length === 0,\n      children: \"Delete Selected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: contacts,\n      columns: contactSchema,\n      pageSize: 10,\n      rowsPerPageOptions: [5, 10, 20],\n      checkboxSelection: true,\n      disableSelectionOnClick: true,\n      sortingOrder: ['asc', 'desc'],\n      autoHeight: true,\n      onSelectionModelChange: handleSelectionChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSnackbar,\n      autoHideDuration: 6000,\n      onClose: () => setOpenSnackbar(false),\n      message: snackbarMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsTable, \"E4nnV6IWexUsjDF8gEAte/qSm9A=\");\n_c = ContactsTable;\nexport default ContactsTable;\nvar _c;\n$RefreshReg$(_c, \"ContactsTable\");","map":{"version":3,"names":["React","useEffect","useState","axios","DataGrid","CircularProgress","Box","Button","Snackbar","jsxDEV","_jsxDEV","contactSchema","field","headerName","width","ContactsTable","_s","contacts","setContacts","loading","setLoading","selectedRows","setSelectedRows","openSnackbar","setOpenSnackbar","snackbarMessage","setSnackbarMessage","fetchContacts","response","get","contactsWithId","data","map","contact","index","id","_id","error","console","handleDelete","length","rowId","contactToDelete","find","delete","handleSelectionChange","newSelection","selectionModel","display","justifyContent","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","height","variant","color","onClick","marginBottom","disabled","rows","columns","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","sortingOrder","autoHeight","onSelectionModelChange","open","autoHideDuration","onClose","message","_c","$RefreshReg$"],"sources":["/Users/anubhavbhutani/Desktop/Erino Assessment/frontend/src/components/ContactTable.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { DataGrid } from '@mui/x-data-grid';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Snackbar from '@mui/material/Snackbar';\n\n// Define schema fields dynamically for rendering\nconst contactSchema = [\n  { field: 'firstName', headerName: 'First Name', width: 150 },\n  { field: 'lastName', headerName: 'Last Name', width: 150 },\n  { field: 'email', headerName: 'Email', width: 250 },\n  { field: 'phoneNumber', headerName: 'Phone Number', width: 180 },\n  { field: 'company', headerName: 'Company', width: 200 },\n  { field: 'jobTitle', headerName: 'Job Title', width: 180 },\n];\n\nconst ContactsTable = () => {\n  const [contacts, setContacts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  // Fetch contacts from the API\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/contacts');\n        // Adding an 'id' field required by DataGrid\n        const contactsWithId = response.data.map((contact, index) => ({\n          ...contact,\n          id: contact._id || index,\n        }));\n        setContacts(contactsWithId);\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchContacts();\n  }, []);\n\n  // Handle delete action\n  const handleDelete = async () => {\n    if (selectedRows.length > 0) {\n      try {\n        // Loop through selected rows and send delete requests\n        for (const rowId of selectedRows) {\n          const contactToDelete = contacts.find(contact => contact.id === rowId);\n          await axios.delete(`http://localhost:4000/contacts/${contactToDelete._id}`);\n        }\n        \n        // Fetch the updated contacts after deletion\n        const response = await axios.get('http://localhost:4000/contacts');\n        const contactsWithId = response.data.map((contact, index) => ({\n          ...contact,\n          id: contact._id || index,\n        }));\n        setContacts(contactsWithId);\n        setSnackbarMessage('Selected contacts have been deleted.');\n        setOpenSnackbar(true);\n        setSelectedRows([]); // Clear selected rows\n      } catch (error) {\n        console.error('Error deleting contacts:', error);\n        setSnackbarMessage('Error deleting selected contacts.');\n        setOpenSnackbar(true);\n      }\n    } else {\n      setSnackbarMessage('No contacts selected.');\n      setOpenSnackbar(true);\n    }\n  };\n\n  const handleSelectionChange = (newSelection) => {\n    setSelectedRows(newSelection.selectionModel);\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ height: 500, width: '100%' }}>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={handleDelete}\n        sx={{ marginBottom: 2 }}\n        disabled={selectedRows.length === 0}\n      >\n        Delete Selected\n      </Button>\n      \n      <DataGrid\n        rows={contacts}\n        columns={contactSchema}\n        pageSize={10}\n        rowsPerPageOptions={[5, 10, 20]}\n        checkboxSelection\n        disableSelectionOnClick\n        sortingOrder={['asc', 'desc']}\n        autoHeight\n        onSelectionModelChange={handleSelectionChange}\n      />\n      \n      <Snackbar\n        open={openSnackbar}\n        autoHideDuration={6000}\n        onClose={() => setOpenSnackbar(false)}\n        message={snackbarMessage}\n      />\n    </Box>\n  );\n};\n\nexport default ContactsTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}